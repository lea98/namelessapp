{"version":3,"sources":["posts/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","post","className","action","type","id","content","LikeButton","display","useState","likes","updateLikes","userLike","updateUserLike","onClick","e","preventDefault","PostsList","postsInit","setPostsInit","posts","setPosts","useEffect","final","newPost","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","alert","send","loadingPosts","map","item","key","PostsComponent","textareaReference","React","createRef","setNewPost","onSubmit","newPostValue","current","value","tempNewPost","unshift","required","ref","App","Boolean","window","location","hostname","match","document","getElementById","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.255209ce.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport {loadingPosts} from '../lookup'\r\n\r\nexport function Post(props){\r\n    const {post, className}=props\r\n    const action={type:'like'}\r\n  \r\n    return <div className={className}>\r\n  \r\n      <p>#{post.id} - {post.content}</p>\r\n        <LikeButton className='btn btn-secondary' post={post} action={action}>{action.display}</LikeButton>\r\n    </div>\r\n  }\r\n  \r\n  export function LikeButton(props){\r\n    const {post, className, action}=props\r\n    const [likes, updateLikes]=useState(post.likes ? post.likes : 0)\r\n    const [userLike, updateUserLike] = useState(post.userLike === true ? true : false)\r\n\r\n    //callback\r\n    const handleLike=(e)=>{\r\n        e.preventDefault()\r\n        if(action.type==='like'){\r\n            if (userLike === true) {\r\n                // perhaps i Unlike it?\r\n                updateLikes(likes - 1)\r\n                updateUserLike(false)\r\n              } else {\r\n                updateLikes(likes + 1)\r\n                updateUserLike(true)\r\n              }\r\n        }\r\n    }\r\n\r\n      return <button className={className} onClick={handleLike} > {likes} Likes </button>\r\n  }\r\n  \r\n\r\n  export function PostsList(props){\r\n    const [postsInit, setPostsInit]=useState([])\r\n    const [posts, setPosts]=useState([])\r\n\r\n    //console.log(props.newPost)\r\n   // setPostsInit([...props.newPost].concat(postsInit)) //concatenate with initial posts. gives infinite loop without useEfect and other list(2.line)\r\n    useEffect(()=>{\r\n      const final=[...props.newPost].concat(postsInit)\r\n      if (final.length!==posts.length){\r\n        setPosts(final)\r\n      }\r\n    },[props.newPost,posts,postsInit])\r\n\r\n\r\n    useEffect(()=>{\r\n      const myCallback=(response,status)=>{\r\n        if(status===200)\r\n        setPostsInit(response)\r\n      }\r\n      loadingPosts(myCallback)\r\n  \r\n    },[])\r\n  \r\n    return posts.map((item)=>{\r\n      return <Post className='border border-primary col-5 py-5 my-5 mx-auto' post={item} key={item.id}>{item.id}</Post>\r\n    })\r\n  }\r\n\r\n  \r\n  export function PostsComponent(props){\r\n    //do get textarea usemethod in react called reference\r\n    const textareaReference = React.createRef()\r\n    const {className}=props\r\n    const [newPost, setNewPost] = useState([]) //create a state comp inside parent component(Posts)\r\n\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault()\r\n        const newPostValue=textareaReference.current.value\r\n        let tempNewPost = [...newPost] //copy posts list? temporary list so i can set new list based on new state?? (list or array)\r\n        tempNewPost.unshift({ //unshift ka push al na pcoetak?\r\n          content:newPostValue,\r\n          likes:0,\r\n          id:1234\r\n        })\r\n\r\n        setNewPost(tempNewPost)\r\n        textareaReference.current.value=''\r\n\r\n    }\r\n\r\n    return <div className={className}>\r\n        <div className='col-12 mb-4'>\r\n        <form className='' onSubmit={handleSubmit}>\r\n          <div className='d-flex justify-content-center'>\r\n        <textarea required={true} ref={textareaReference}>\r\n        </textarea>\r\n        <button type='submit' className='btn btn-secondary'>SUBMIT</button>\r\n        </div>\r\n    </form>\r\n    </div>\r\n    <PostsList newPost={newPost}/>\r\n    </div>\r\n  }\r\n\r\n\r\n","export function loadingPosts(callback){\r\n    const xhr = new XMLHttpRequest() \r\n    const method = 'GET' \r\n    const url = \"http://localhost:8000/api/posts/\"\r\n    const responseType = 'json'\r\n  \r\n    xhr.responseType = responseType\r\n    xhr.open(method,url)\r\n    xhr.onload=function(){\r\n    callback(xhr.response,xhr.status)\r\n  \r\n    }\r\n    xhr.onerror=function(e){\r\n      //console.log(e)\r\n      callback({'message':'error'},400)\r\n      alert('Greska')\r\n      }\r\n    xhr.send()\r\n  }","import React from 'react';\nimport './App.css';\nimport {PostsComponent} from './posts'\n\n\n\nfunction App() {\n\n\n\n  return (    \n    <div className=\"bg-light\">\n        <PostsComponent className='border border-secondary col-3 py-2 my-4 mx-auto'/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {PostsComponent} from './posts'\n\nif (document.getElementById('root')){\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);}\n\nif(document.getElementById('postsComp')){ //i want to show this on django runpage\n  ReactDOM.render(\n    <React.StrictMode>\n      <PostsComponent />\n    </React.StrictMode>,\n    document.getElementById('postsComp')\n  );}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}