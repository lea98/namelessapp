{"version":3,"sources":["lookup/components.js","posts/buttons.js","posts/lookup.js","posts/post.js","posts/postsList.js","posts/createPost.js","posts/components.js","App.js","serviceWorker.js","index.js"],"names":["lookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","status","response","onerror","e","alert","send","ActionButton","props","post","className","action","didPerformAction","likes","handleLikePostCallback","display","type","onClick","preventDefault","id","likePost","UserImage","style","cursor","event","window","location","href","creator","username","Post","useState","actionPost","setActionPost","idFromUrl","matches","match","getLastNumber","alreadyInDetail","parseInt","handlePerformAction","newActionPost","convertedTime","timestmp","dateAndTime","convertTimestamp","timestamp","content","first_name","last_name","PostsList","postsInit","setPostsInit","posts","setPosts","postsDidSet","setPostsDidSet","useEffect","final","newPosts","concat","loadingPosts","map","item","key","CreatePost","textareaReference","React","createRef","didPost","onSubmit","newPostValue","current","value","console","log","required","ref","PostDetail","didLookup","setDidLookup","setPost","handleLookup","detailView","PostsComponent","hasPermission","setNewPosts","newPost","tempNewPosts","unshift","App","Boolean","hostname","getElementById","ReactDOM","render","StrictMode","postsComp","createElement","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4e7841b8.chunk.js","sourcesContent":["\r\nfunction getCookie(name) { //django documentation\r\n  var cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n      var cookies = document.cookie.split(';');\r\n      for (var i = 0; i < cookies.length; i++) {\r\n          var cookie = cookies[i].trim();\r\n          // Does this cookie string begin with the name we want?\r\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n              break;\r\n          }\r\n      }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\n\r\nexport function lookup(method, endpoint, callback, data) {\r\n  let jsonData;\r\n  if (data){\r\n    jsonData = JSON.stringify(data)\r\n  }\r\n  const xhr = new XMLHttpRequest() \r\n  const url = `http://localhost:8000/api${endpoint}`\r\n\r\n  xhr.responseType = 'json'\r\n  const csrftoken=getCookie('csrftoken');\r\n\r\n  xhr.open(method,url)\r\n\r\n if(csrftoken && data) //i added data cause i got cors on get \r\n{\r\n  xhr.setRequestHeader('Content-Type', 'application/json')\r\n  xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\") \r\n  xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\") \r\n  xhr.setRequestHeader(\"X-CSRFToken\",csrftoken)\r\n\r\n}\r\n\r\n  xhr.onload=function(){\r\n    if(xhr.status===403){\r\n      // if(xhr.response.detail===\"Authentication credentials were not provided.\"){\r\n      //   window.location.href=\"/\"\r\n      // }\r\n    }\r\n  callback(xhr.response,xhr.status)\r\n\r\n  }\r\n  xhr.onerror=function(e){\r\n    //console.log(e)\r\n    callback({'message':'error'},400)\r\n    alert('Greska')\r\n    }\r\n  xhr.send(jsonData)\r\n}\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport {likePost} from './lookup'\r\n\r\nexport function ActionButton(props){\r\n    const {post, className, action, didPerformAction}=props\r\n    const likes=post.likes ? post.likes : 0\r\n   // const [userLike, updateUserLike] = useState(post.userLike === true ? true : false)\r\n\r\n    //callback\r\n\r\n    const handleLikePostCallback=(response,status)=>{\r\n      if((status===200||status===201)&&didPerformAction){\r\n        //updateLikes(response.likes)\r\n        didPerformAction(response,status)\r\n        //updateUserLike(true)\r\n      }\r\n    //   if(action.type==='like'){\r\n    //     if (userLike === true) {\r\n    //         // perhaps i Unlike it?\r\n    //         updateLikes(likes - 1)\r\n    //         updateUserLike(false)\r\n    //       } else {\r\n    //         updateLikes(likes + 1)\r\n    //         updateUserLike(true)\r\n    //       }\r\n    // }\r\n    }\r\n\r\n    const handleLikeClick=(e)=>{\r\n        e.preventDefault()\r\n        likePost(post.id,action.type,handleLikePostCallback)\r\n\r\n    }\r\n   const display = action.type === 'like' ? `${likes} ${action.display}` : action.display\r\n\r\n      return <button className={className} onClick={handleLikeClick} > {display} </button> \r\n   }\r\n  ","import {lookup} from '../lookup'\r\n\r\nexport function loadingPosts(username,callback){ //postslist\r\n  let endpoint =  \"/posts/\" //leave like this, not if else\r\n  if (username){\r\n      endpoint =  `/posts/?username=${username}`\r\n  }\r\n  lookup(\"GET\", endpoint, callback)\r\n   }\r\n \r\nexport function detailView(id,callback){ //postslist\r\n\r\n    lookup('GET',`/posts/${id}/`,callback)\r\n  \r\n     }\r\n\r\n export function createPost(newPost,callback){\r\n   lookup('POST', '/posts/create', callback, {content:newPost})\r\n }\r\n \r\n export function likePost(id, action, callback){\r\n   lookup('POST', '/posts/action', callback,{id:id, action:action})\r\n }","import React, {useState} from 'react'\r\nimport {ActionButton} from './buttons'\r\n\r\nfunction getLastNumber(url) {\r\n  var matches = url.match(/\\d+/g);\r\n  return matches[matches.length - 1];\r\n}\r\n\r\n\r\n function UserImage(props){\r\n  \r\n  const handleImageClick=(event)=>{\r\n\r\n    event.preventDefault()\r\n    window.location.href=`/profile/${props.post.creator.username}`\r\n  }\r\n\r\n\r\n   return <span style={{cursor: 'pointer'}} onClick={handleImageClick} className='py-3 px-3  rounded-circle bg-dark'>{props.post.creator.username} </span>\r\n }\r\n\r\n\r\nfunction convertTimestamp(timestmp){\r\n  let dateAndTime=timestmp.split('T')\r\n  let date=dateAndTime[0]\r\n  \r\n  let time=dateAndTime[1].split('.')\r\n  return [date,time[0]]\r\n  }\r\n\r\nexport function Post(props){\r\n  const {post, className}=props\r\n  const [actionPost, setActionPost]=useState(props.post ? props.post :null)\r\n\r\n  const url=window.location.href\r\n  const idFromUrl=getLastNumber(url)\r\n  const alreadyInDetail= post.id === parseInt(idFromUrl)\r\n  \r\n  const handlePerformAction=(newActionPost,status)=>{\r\n    if(status===200){\r\n    setActionPost(newActionPost)\r\n    }\r\n  }\r\n\r\n  const handlePostDetailClick=(event)=>{\r\n\r\n    event.preventDefault()\r\n    window.location.href=`/${post.id}`\r\n  }\r\n\r\n\r\n  let convertedTime=convertTimestamp(post.timestamp)\r\n\r\n    return <div className={className}>\r\n  <UserImage post={post} ></UserImage>\r\n  <p className='mt-3'>{post.creator.username}</p>\r\n  <p className='mt-3'>#{post.id} - {post.content}</p>\r\n  {alreadyInDetail===false?null: <div>\r\n<div>{post.creator.first_name}{' '}{post.creator.last_name}</div>\r\n  <div>{convertedTime[0]}{', '}{convertedTime[1]}</div>\r\n</div>}\r\n\r\n        <ActionButton className='btn btn-secondary' post={actionPost} didPerformAction={handlePerformAction} action={{type: \"like\", display:\"Likes\"}}></ActionButton>\r\n        <ActionButton className='btn btn-secondary' post={actionPost} didPerformAction={handlePerformAction}  action={{type: \"dislike\", display:\"Dislike\"}}></ActionButton>\r\n       {alreadyInDetail===true?null: <button className='btn btn-secondary' onClick={handlePostDetailClick}>DETAIL</button>}\r\n    </div>\r\n  }\r\n  \r\n\r\n\r\n\r\n  ","import React, {useEffect, useState} from 'react'\r\nimport {loadingPosts} from './lookup'\r\nimport {Post} from './post'\r\n\r\n  export function PostsList(props){\r\n    const [postsInit, setPostsInit]=useState([])\r\n    const [posts, setPosts]=useState([])\r\n    //loadindPosts ce trigerat GET stalno cause i dont have condition. add:\r\n    const [postsDidSet,setPostsDidSet]=useState(false)\r\n\r\n\r\n    //console.log(props.newPost)\r\n   // setPostsInit([...props.newPost].concat(postsInit)) //concatenate with initial posts. gives infinite loop without useEfect and other list(2.line)\r\n    useEffect(()=>{\r\n      const final=[...props.newPosts].concat(postsInit)\r\n      if (final.length!==posts.length){\r\n        setPosts(final)\r\n      }\r\n    },[props.newPosts,posts,postsInit])\r\n\r\n\r\n    useEffect(()=>{\r\n      if(postsDidSet===false){\r\n      const handleloadingPosts=(response,status)=>{\r\n        if(status===200){\r\n        setPostsInit(response)\r\n        setPostsDidSet(true)\r\n        }else{\r\n          alert('error')\r\n        }\r\n      }\r\n      loadingPosts(props.username,handleloadingPosts) //null for username as default\r\n    }\r\n    },[postsInit,postsDidSet,setPostsDidSet,props.username]) //also pass props.username as dependency\r\n  \r\n    return posts.map((item)=>{\r\n      return <Post className='border border-primary col-5 py-5 my-5 mx-auto' post={item} key={item.id} ></Post> //{item.id}?\r\n    })\r\n  }","import React from 'react'\r\nimport {createPost} from './lookup'\r\n\r\n\r\n  export function CreatePost(props){\r\n\r\n    const textareaReference = React.createRef()\r\n    const { didPost}=props\r\n   // const {username}=props insted passing username={username} delete this and ass ...props\r\n    //console.log(props) valid and username\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault()\r\n        const newPostValue=textareaReference.current.value //text from textearea\r\n       // let tempNewPost = [...newPost] //copy posts list? temporary list so i can set new list based on new state?? (list or array)\r\n        createPost(newPostValue, (response,status)=>{ //response,status as callback\r\n          if (status===201){\r\n          didPost(response)\r\n\r\n        }\r\n        else{\r\n          alert('error')\r\n          console.log(response)\r\n      }\r\n        })\r\n    \r\n        textareaReference.current.value=''\r\n\r\n    }\r\n//if has permission allow div to be rendered\r\n    return <div className='col-12 mb-4'>\r\n    <form className='' onSubmit={handleSubmit}>\r\n      <div className='d-flex justify-content-center'>\r\n    <textarea required={true} ref={textareaReference}>\r\n    </textarea>\r\n    <button type='submit' className='btn btn-secondary'>SUBMIT</button>\r\n    </div>\r\n</form>\r\n</div>\r\n}","import React, {useState, useEffect} from 'react'\r\nimport {PostsList} from './postsList'\r\nimport {CreatePost} from './createPost'\r\nimport {detailView} from './lookup'\r\nimport {Post} from './post'\r\n\r\nexport function PostDetail(props){\r\n  const {id}=props\r\n  const [didLookup, setDidLookup]=useState(false)\r\n  const [post,setPost]=useState(null)\r\n  //callback handler:\r\n  const handleLookup=(response,status)=>{\r\n    if (status===200){\r\n      setPost(response)\r\n    }\r\n    else{\r\n      alert('Post not found')\r\n    }\r\n  }\r\n\r\n  useEffect(()=>{\r\n    if (!didLookup){\r\n      detailView(id,handleLookup)\r\n\r\n      setDidLookup(true)\r\n    }\r\n  },[id, didLookup, setDidLookup] )\r\n\r\n  return post===null?null : <Post post={post}/>\r\n}\r\n\r\n\r\n  export function PostsComponent(props){\r\n    //const {hasPermission} = props //from index.html data-has-permission (not built in)\r\n    const hasPermission=props.hasPermission==='false' ? false:true //cause its a string there\r\n\r\n    const [newPosts, setNewPosts] = useState([]) //create a state comp inside parent component(Posts)\r\n   // const {username}=props insted passing username={username} delete this and ass ...props\r\n    //console.log(props) valid and username\r\n    const handleSubmit = (newPost)=>{\r\n        let tempNewPosts = [...newPosts] //copy posts list? temporary list so i can set new list based on new state?? (list or array)\r\n          tempNewPosts.unshift(newPost) //unshift ka push al na pcoetak?\r\n          setNewPosts(tempNewPosts)\r\n\r\n        \r\n  \r\n    }\r\n//if has permission allow div to be rendered\r\n    return <div className={props.className}>\r\n        {hasPermission===true&& <CreatePost didPost={handleSubmit} className='col-12 mb-3'/>}\r\n    <PostsList newPosts={newPosts} {...props}/>\r\n    </div>\r\n  }\r\n\r\n\r\n ","import React from 'react';\nimport './App.css';\nimport {PostsComponent} from './posts'\n\n\n\nfunction App() {\n\n\n\n  return (    \n    <div className=\"bg-light\">\n        <PostsComponent className='border border-secondary col-3 py-2 my-4 mx-auto'/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {PostsComponent, PostDetail} from './posts'\n\nif (document.getElementById('root')){\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);}\n\nconst postsComp = document.getElementById('postsComp')\nconst e=React.createElement\nif(postsComp){ //i want to show this on django runpage\n  //console.log(document.getElementById('postsComp').dataset) //built in property that alllows us to see everything hats added to element e.g. data-username\n  \n  //pass in arguments you want to add as props, e.g. dict postsComp.dataset\n  ReactDOM.render(e(PostsComponent,postsComp.dataset),postsComp);}\n\n\n  const postsDetail = document.querySelectorAll('.post-detail')\n  postsDetail.forEach(container=>{\n    ReactDOM.render(e(PostDetail,container.dataset),container);} //insert into individaul container it is looping through\n\n  )\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}